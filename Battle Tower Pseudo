Battle Tower Pseudo:

1. Generate random Poketeams, give each team certain amount of lives.
2. User Poketeam fights each rand Poketeam
    Case 1: If User loses match, battle tower end
    Case 2: If User win/draw, rand Poketeam lose 1 life, continue to next opponent
3. After fighting each initial rand Poketeam once, remove teams with 0 lives from order, and process repeats (Before every battle, both teams regen)
4. Once (if) all rand teams have 0 lives, battle tower complete, your team win

Implement using queue:
    store generated teams into queue
    have counter as part of iterator (next)
    after opponenet team lose a life, check that its life not 0, else delete/ check at beginning of next if team has lives, else remove
    after fighting opponent, place that opponent back at end of queue (queue.append(queue.serve()))
    if queue is_empty, win


use linked list with front and end pointer
Why?
Remove as I go, without having to iterate through and append(serve)


avoid_duplicates:
unique_team_queue = CircularQueue(len(n))
for _ in n(num of teams):
    current_trainer = self.serve()
    current_team = current_trainer.team
    current_team_size = len(current_team)
    aset = aset(len(current_team))
    for _in range(len(current_team)):
        if current_trainer.battle_mode == 0
            poketype = current_team.pop().type()
        else:
            poketype = current_team.serve().type()
        if poketype not in aset:
            aset.add(poketype)
        else:
            break #end check, go check next team
    
    if len(aset)==len(current_team_size):
        self.append(current_trainer)
    